from Crypto.Util.number import *
from math import prod
from random import randint
from pwn import xor
from hashlib import sha256

def get_prime():
    M = prod(sieve_base[:61])
    g = 3726083052762492511997545471856784907470816065789983160805929500558490244172986486230422762355591554338760838746037099
    while True:
        k = randint(1, 2**120)
        a = randint(1, 2**67)
        p = k * M + pow(g, a, M)
        if isPrime(p):
            return p

def hint():
    x = 2093485720398457109348571098457098347250982735
    k = 1023847102938470123847102938470198347092184702
    for c in cc:
        x = k * (x + c)
    return x % 2**600

flag = b"flagfest{REDACTED}"
n = get_prime() * get_prime()
flag = long_to_bytes(pow(bytes_to_long(flag), 0x10001, n))

cc = [randint(-2**67, 2**67) for _ in range(9)]
key = sha256("".join(str(i) for i in cc).encode()).digest()
enc = xor(key, flag)

print(f"{n = }")
print(f"{enc.hex() = }")
print(f"{hint() = }")

"""
n = 49265678984587637428252157349593936970270666254770296150696808296814677897602541843263902750729493977684839994744784609575982024241940263109350613047689624403961823588293946628194352288868286308736700214848835174137875648777816913401931264120073837376318270819330730494358856785627971952583982115399888894781
enc.hex() = '2cb0cc51372eeef6302eb553ccea4799264c87548747f36649bb58932c7a1bc09c8806813c269d8abca241f5ed284fe11c7339321760d9cb6ae4048438ace6d1094061f123b5f837aeda2562bd4256f74f1297e79d44fa71eb589aa24eacb51f3d18c3e0ff5092d6da05ca3267d675e0f79ebe33bca1994bf47fce1822da0db9'
hint() = 1576170473174857096315248064336827668017577652701100136460153611244869915069040721151492321359106020532851261548832803894143789008208850495544726519434480563706971795347167144434680
"""
