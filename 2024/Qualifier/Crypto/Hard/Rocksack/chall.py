from Crypto.Util.number import *
from math import prod
from random import randint
from pwn import xor
from hashlib import sha256

def get_prime():
    M = prod(sieve_base[:61])
    g = 3726083052762492511997545471856784907470816065789983160805929500558490244172986486230422762355591554338760838746037099
    while True:
        k = randint(1, 2**120)
        a = randint(1, 2**67)
        p = k * M + pow(g, a, M)
        if isPrime(p):
            return p

def hint():
    x = 2093485720398457109348571098457098347250982735
    k = 1023847102938470123847102938470198347092184702
    for c in cc:
        x = k * (x + c)
    return x % 2**600

flag = b"flagfest{REDACTED}"
n = get_prime() * get_prime()
flag = long_to_bytes(pow(bytes_to_long(flag), 0x10001, n))

cc = [randint(-2**67, 2**67) for _ in range(9)]
key = sha256("".join(str(i) for i in cc).encode()).digest()
enc = xor(key, flag)

print(f"{n = }")
print(f"{enc.hex() = }")
print(f"{hint() = }")

"""
n = 49265678984587637428252157349593936970270666254770296150696808296814677897602541843263902750729493977684839994744784609575982024241940263109350613047689624403961823588293946628194352288868286308736700214848835174137875648777816913401931264120073837376318270819330730494358856785627971952583982115399888894781
enc.hex() = 'c048ed81d6db82b9ab4883a7ec988075df107861e1fe9785cde477d17b18735857a33a81f46c2958ccbe0c3fd523c6aba6fe4b19c3dc8fb096831682cd18a696f7f19211ef8f23fb269436a06f2fe200acb1b3d4ed423ceacb0c247488493bceb5b4ea06f4734b377896289a8faae6913a8f0f50fd68902c06ee6a0053f49593'
hint() = 2837225526064958792779457483765204042025065520627903303646324096783933751081670960863451056315783517735486686921022283716822939545653813808508870623482599809094577435978200215036390
"""
